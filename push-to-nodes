#!/usr/bin/env python3
import argparse
import getpass
import os
import re
import subprocess
import sys


class Sync:

    def __init__(self, nodes_rawinput, source, dest, nthreads):
        self.username = getpass.getuser()
        self.source = source
        self.dest = dest
        self.nthreads = nthreads
        self.procs = {}
        # Parse the input for node
        self.nodes = []
        for opt in nodes_rawinput:
            if re.match(r'[0-9]+[.]{2}[0-9]+', opt) is not None:
                start_node, end_node = opt.split(sep='..')
                self.nodes += list(map(lambda x: 'node' + str(x),
                                   range(int(start_node), int(end_node) + 1)))
            else:
                self.nodes.append('node' + opt)

    def to_node(self, node):
        destination = '{}@{}:{}'.format(self.username, node, self.dest)
        rsync = subprocess.Popen(['rsync', '-raqpzHogt', self.source, destination],
                                 stderr=subprocess.PIPE)
        return rsync

    def spawn_next_proc(self):
        node = self.nodes.pop()
        proc = self.to_node(node)
        self.procs[proc.pid] = {'node': node, 'proc': proc}

    def batch_sync(self):
        while len(self.procs) < self.nthreads:
            try:
                self.spawn_next_proc()
            except IndexError:
                break

        while self.procs:
            pid, exitstatus = os.wait()
            if exitstatus is not 0:
                print('An error has occured when pushing to {}:'
                    .format(self.procs[pid]['node']))
                print(self.procs[pid]['proc'].stderr.read().decode('utf8').strip(), '\n')
            else:
                print('Sync with {} is completed'.format(self.procs[pid]['node']))
            self.procs.pop(pid)
            try:
                self.spawn_next_proc()
            except IndexError:
                continue


if __name__ == '__main__':
    parser = argparse.ArgumentParser(prog='push-to-nodes',
                                     description='''
                                     A QSpin specific utility program to send
                                     files to multiple nodes with rsync. For
                                     this program to work well, password-less
                                     login to the remote SSH server(s) must have
                                     been already properly set up.
                                     ''')
    parser.add_argument('nodes', nargs='+',
                        help='''
                        Range or list of nodes to be dealt with. For instance,
                        for the range of nodes nodes1-node5 inclusive, type
                        "1..5" (without the quotes). For nodes node1, node4 and
                        node10, type "1 4 10".
                        ''')
    parser.add_argument('-s', '--source', required=True,
                        help='The source directory on the main node')
    parser.add_argument('-d', '--destination',
                        help='''
                        The destination directory on the remote node. The
                        destination directory is assumed to be the same as the
                        source directory if this option is omitted.
                        ''')
    parser.add_argument('-t', '--threads', type=int,
                        help='''
                        The number of execution threads. By default this program
                        spawns as many threads as the number of available
                        processors.
                        ''')
    args = parser.parse_args()
    nodes_rawinput = args.nodes
    source_dir = args.source
    dest_dir = args.destination if args.destination is not None else source_dir
    nthreads = args.threads if args.threads is not None else os.cpu_count()
    sync = Sync(nodes_rawinput, source_dir, dest_dir, nthreads)
    sync.batch_sync()
